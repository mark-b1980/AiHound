package com.pentest_experts.aihound;

import java.io.IOException;
import java.io.InputStream;

import org.datavec.image.loader.NativeImageLoader;
import org.datavec.image.transform.ResizeImageTransform;
import org.deeplearning4j.nn.graph.ComputationGraph;
import org.deeplearning4j.nn.modelimport.keras.KerasModelImport;
import org.deeplearning4j.nn.modelimport.keras.exceptions.InvalidKerasConfigurationException;
import org.deeplearning4j.nn.modelimport.keras.exceptions.UnsupportedKerasConfigurationException;
import org.nd4j.common.io.ClassPathResource;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.api.preprocessor.DataNormalization;
import org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler;

public class AiHound {
    private ComputationGraph model = null;
    private int WIDTH = 224;
    private int HEIGHT = 224;

    private final ResizeImageTransform rit = new ResizeImageTransform(this.WIDTH, this.HEIGHT);
    private final NativeImageLoader loader = new NativeImageLoader(this.WIDTH, this.HEIGHT, 3, rit);
    private final DataNormalization scalar = new ImagePreProcessingScaler(0, 1);

    public AiHound(){
        // Load model from file
        String modelPath = "";       
        try {
            modelPath = new ClassPathResource("aihound.h5").getFile().getPath();
            this.model = KerasModelImport.importKerasModelAndWeights(modelPath);
        } 
        catch (IOException | InvalidKerasConfigurationException | UnsupportedKerasConfigurationException ex) {
            System.err.println("ERROR - Loading model failed with: " + ex);
        } 
    }
    
    public double[] predict(InputStream f){
        INDArray features = null;
        try{
            features = this.loader.asMatrix(f, false); // GIVES ME A SHAPE OF 1, 3, this.WIDTH, this.HEIGHT
        } 
        catch(IOException ex){
            return new double[] {0, 0, 0, 0, 0, 0};
        }
        //features = features.permute(0, 2, 3, 1);

        for (int y = 0; y < this.WIDTH; y++) {
            for (int x = 0; x < this.HEIGHT; x++) {
                double a = features.getDouble(0,y,x,0);
                double b = features.getDouble(0,y,x,2);
                features.putScalar(new int[] {0,y,x,0}, b);
                features.putScalar(new int[] {0,y,x,2}, a);
            }
        }            

        this.scalar.transform(features);

        INDArray[] prediction = this.model.output(features);

        // Get Classes => {0: "document", 1: "drugs", 2: "id_or_creditcard", 3: "money", 4: "neg", 5: "nude"}
        double pred[] = prediction[0].toDoubleVector();
        return pred;
    }
}
